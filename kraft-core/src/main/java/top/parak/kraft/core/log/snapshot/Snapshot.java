package top.parak.kraft.core.log.snapshot;

import top.parak.kraft.core.node.NodeEndpoint;

import javax.annotation.Nonnull;
import java.io.InputStream;
import java.util.Set;

/**
 * Snapshot.
 * <p><b>When generate snapshot</b></p>
 * When the count of the log entries exceeds a certain threshold, the node internally
 * produces a new log snapshot then replaces the existing combination of log snapshot
 * and log.
 * <p><b>Who generate snapshot</b></p>
 * Unlike standalone mode, log snapshot can be generated by anyone under cluster mode.
 * Node who meets the log snapshot generation conditions can generate snapshot by themselves.
 * Doing so avoids transferring log snapshots from leader to followers.
 * <p><b>Structure of snapshot</b></p>
 * <pre>
 * +------------------------+
 * |    header length (4)   |
 * +------------------------+-----------------------+
 * |              snapshot header (var)             |
 * |  last_included_index, last_included_term. etc  |
 * +------------------------------------------------+
 * |                                                |
 * |                   data (var)                   |
 * |                                                |
 * +------------------------------------------------+
 * </pre>
 *
 * @author KHighness
 * @since 2022-03-18
 * @email parakovo@gmail.com
 */
public interface Snapshot {

    /**
     * Get the index of the last log entry replaced by the snapshot.
     * (the index of the last log entry applied by the state machine)
     *
     * @return tne index of the log entry
     */
    int getLastIncludedIndex();

    /**
     * Get the term of the last log entry replaced by the snapshot.
     * (the term of the last log entry applied by the state machine)
     *
     * @return tne term of the log entry
     */
    int getLastIncludedTerm();

    /**
     * Get the group config when generating the snapshot.
     *
     * @return the group config
     */
    @Nonnull
    Set<NodeEndpoint> getLastConfig();

    /**
     * Get the size of the snapshot.
     *
     * @return the size of snapshot
     */
    long getDataSize();

    /**
     * Get the input stream of the snapshot.
     *
     * @return a input stream
     */
    @Nonnull
    SnapshotChunk readData(int offset, int length);

    /**
     * Get the input stream of the snapshot.
     *
     * @return a input stream
     */
    @Nonnull
    InputStream getDataStream();

    /**
     * Close the snapshot.
     */
    void close();

}
